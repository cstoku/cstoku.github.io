<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Toku&#39;s Blog </title>
    <link>http://blog.sce-toku.jp/index.xml</link>
    <language>en-us</language>
    <author>CS_Toku</author>
    <rights>(C) 2015</rights>
    <updated>2015-12-24 02:05:50 &#43;0900 JST</updated>

    
      
        <item>
          <title>Python3.5のType Hintについて</title>
          <link>http://blog.sce-toku.jp/blog/2015/12/24/python-typehints/</link>
          <pubDate>Thu, 24 Dec 2015 02:05:50 JST</pubDate>
          <author>CS_Toku</author>
          <guid>http://blog.sce-toku.jp/blog/2015/12/24/python-typehints/</guid>
          <description>

&lt;p&gt;この記事は&lt;a href=&#34;http://www.adventar.org/calendars/846#list-2015-12-23&#34;&gt;Python Advent Calendar 2015&lt;/a&gt;の23日目の記事です。&lt;/p&gt;

&lt;p&gt;ちゃんとした記事をこのブログに書くのは今回が初です（笑）&lt;/p&gt;

&lt;p&gt;早速、やってきまそ。&lt;/p&gt;

&lt;h1 id=&#34;type-hintsについて書こうと思ったわけ&#34;&gt;Type Hintsについて書こうと思ったわけ&lt;/h1&gt;

&lt;p&gt;最近HaskellやScalaなどの関数型のパラダイムを持つ静的型付け言語を学ぶようになって型推論など面白いなーなど思っていたところに動的型付けのPythonで型についての提案が導入されたので気になった次第です。&lt;/p&gt;

&lt;p&gt;動的型付け言語ですからてきと〜にプログラム書いてても通ってしまいます。まぁそこがいいとこでもあるのかもしれませんが、少し大きなライブラリや業務で使うとなるとバグ見つけたりするのに苦労しそうです。&lt;/p&gt;

&lt;p&gt;そこでType Hintsがあれば！！！というわけで勉強がてら紹介です。&lt;/p&gt;

&lt;p&gt;それと、記事投稿遅れてスイマセンm(_ _)m&lt;/p&gt;

&lt;h1 id=&#34;type-hintsとは&#34;&gt;Type Hintsとは！&lt;/h1&gt;

&lt;p&gt;Type Hintsとは&lt;a href=&#34;https://www.python.org/dev/peps/pep-0484/&#34;&gt;PEP0484&lt;/a&gt;で提案された静的型解析などを行うための仕様を提案したものです。&lt;/p&gt;

&lt;p&gt;ぶっちゃければ、関数の引数・戻り値などに型を指定して型チェックを行うための仕様を提案したもの。&lt;/p&gt;

&lt;h2 id=&#34;目的は&#34;&gt;目的は・・・&lt;/h2&gt;

&lt;p&gt;この提案の目的としては型アノテーションの標準化された構文の提供です。これにより、静的型解析やリファクタリングや実行時の型チェックなどなど、行えるようになります。&lt;/p&gt;

&lt;p&gt;まぁ、主には静的型解析がやりたいそうです。&lt;/p&gt;

&lt;h2 id=&#34;目的じゃないもの&#34;&gt;目的じゃないもの&lt;/h2&gt;

&lt;p&gt;この提案が取り込まれた暁にはPythonは静的型付け言語に・・・・！！&lt;/p&gt;

&lt;p&gt;とはならないわけで。&lt;/p&gt;

&lt;p&gt;依然として動的型付け言語ですし、Type Hintsを必須にすることは望んでないようです。&lt;/p&gt;

&lt;p&gt;まぁ、自分は取っ付き易いとこがPythonの取り柄の一つだと思っているので、良い考えだと思います。&lt;/p&gt;

&lt;p&gt;それでは本題に。&lt;/p&gt;

&lt;h1 id=&#34;型定義の構文&#34;&gt;型定義の構文&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;def func(name: str) -&amp;gt; str:
    return &#39;Hello &#39; + name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とまぁ、関数アノテーションを利用して型を指定してあげるだけです。簡単ですね。&lt;/p&gt;

&lt;p&gt;型を参照したい場合は&lt;code&gt;__annotations__&lt;/code&gt;属性として参照できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-pycon&#34;&gt;&amp;gt;&amp;gt;&amp;gt; func.__annotations__
{&#39;name&#39;: &amp;lt;class &#39;str&#39;&amp;gt;, &#39;return&#39;: &amp;lt;class &#39;str&#39;&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;型の別名&#34;&gt;型の別名&lt;/h2&gt;

&lt;p&gt;変数に突っ込みましょう。注意するのが、変数名の先頭を大文字にしておくことです。
(ユーザー定義型として扱うので)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;Name = str

def func(name: Name) -&amp;gt; str:
    return &#39;Hello &#39; + name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ジェネリクス&#34;&gt;ジェネリクス&lt;/h2&gt;

&lt;p&gt;typingモジュールのTypeVarを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from typing import TypeVar

T = TypeVar(&#39;T&#39;)

def p(x: T) -&amp;gt; None:
    print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TypeVarの第1引数は代入する変数名と同じでなければなりません。また、型変数を再定義してもいけません。&lt;/p&gt;

&lt;p&gt;この場合の型変数Tは全ての型を受け付けます。こういう型をAny型としています。&lt;/p&gt;

&lt;p&gt;(例えば、デフォルトの関数の引数と戻り値はAny型です。何でも受け取るし、何かしら返すから)&lt;/p&gt;

&lt;p&gt;また、戻り値で指定している&lt;code&gt;None&lt;/code&gt;は&lt;code&gt;type(None)&lt;/code&gt;と等価です。&lt;/p&gt;

&lt;p&gt;TypeVarは特定の型を指定することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from typing import TypeVar

T = TypeVar(&#39;T&#39;, str, bytes)

def p(x: T) -&amp;gt; None:
    print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっと複雑な使い方をこの規約の例から引用してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from typing import TypeVar, Iterable, Tuple

T = TypeVar(&#39;T&#39;, int, float, complex)
Vector = Iterable[Tuple[T, T]]

def inproduct(v: Vector) -&amp;gt; T:
    return sum(x*y for x, y in v)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この例ではint、float、complex型のペア(タプル)のオブジェクトを持つ、イテレート可能な型Vectorを定義していますね。&lt;/p&gt;

&lt;p&gt;inproduct関数の引数として先ほど作成したVector型を受け取りT型(intかfloatかcomplex)を返すように記述されています。&lt;/p&gt;

&lt;h3 id=&#34;ユーザー定義のクラスでジェネリック&#34;&gt;ユーザー定義のクラスでジェネリック&lt;/h3&gt;

&lt;p&gt;ジェネリック型としてユーザー定義のクラスを定義するためには&lt;code&gt;Generic&lt;/code&gt;基底クラスを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from typing import TypeVar, Generic

T = TypeVar(&#39;T&#39;)
S = TypeVar(&#39;S&#39;)

class C(Generic[T, S]):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;複数指定する場合はカンマで切って指定してください。&lt;/li&gt;
&lt;li&gt;多重継承が使えます。&lt;/li&gt;
&lt;li&gt;メタクラスはサポートされていません。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;呼び出し可能オブジェクト&#34;&gt;呼び出し可能オブジェクト&lt;/h2&gt;

&lt;p&gt;defで作った関数とか、lambdaで作った関数とか、&lt;code&gt;__call__&lt;/code&gt;が定義されているクラスのインスタンスとかとか？&lt;/p&gt;

&lt;p&gt;そういうのを指すときの表現では&lt;code&gt;Callable&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Callable&lt;/code&gt;は1つ目に引数のリスト、2つ目に戻り値を指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from typing import Callable

def async_query(on_success: Callable[[int], None],
                on_error: Callable[[int, Exception], None]) -&amp;gt; None:
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用してるので処理全然書いてませんが。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;on_success&lt;/code&gt;は引数にint型をとり、戻り値は無し&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_error&lt;/code&gt;は引数にint型とException型をとり、戻り値は無し&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という感じで表現できます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Callable&lt;/code&gt;の1つ目の引数に空のリストを指定することで引数なしを表現することができます。&lt;/p&gt;

&lt;p&gt;また、引数リストには省略記号を使用することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;Func = Callable[..., str]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで注意しておくことが、キーワード引数を指定するための仕組みが今のところないことです。&lt;/p&gt;

&lt;p&gt;省略記号を利用した場合はキーワード引数を使用することができます。&lt;/p&gt;

&lt;h2 id=&#34;コレクションの中の型指定&#34;&gt;コレクションの中の型指定&lt;/h2&gt;

&lt;p&gt;intなどの場合はそのまま指定すればいいですが、辞書とかリストの場合は中のデータの型を指定する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;Vector = List[float]
NameDict = Dict[str, str]
NumSet = Set[int]
NumFSet = FrozenSet[int]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;センスない例ですねぇ(笑)&lt;/p&gt;

&lt;h2 id=&#34;上界の指定&#34;&gt;上界の指定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TypeVar&lt;/code&gt;のキーワード引数&lt;code&gt;bound&lt;/code&gt;を指定することで可能です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from typing import TypeVar

class Comparable(metaclass=ABCMeta):
    @abstractmethod
    def __lt__(self, other: Any) -&amp;gt; bool:
        ...

CT = TypeVar(&#39;CT&#39;, bound=Comparable)

def min(x: CT, y: CT) -&amp;gt; CT:
    if x &amp;lt; y:
        return x
    else:
        return y

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また引用です。&lt;/p&gt;

&lt;p&gt;要するに型変数CTはComparableのサブクラスである。という指定ができるということですね。&lt;/p&gt;

&lt;p&gt;よってmin関数は引数に取れるのはComparableのサブクラスのオブジェクトのみになります。&lt;/p&gt;

&lt;h2 id=&#34;共変性と反変性&#34;&gt;共変性と反変性&lt;/h2&gt;

&lt;p&gt;共変性を指定するときは&lt;code&gt;covariant=True&lt;/code&gt;を、反変性を指定するときは&lt;code&gt;contravariant=True&lt;/code&gt;を&lt;code&gt;TypeVar&lt;/code&gt;に渡します。&lt;/p&gt;

&lt;p&gt;また例を引用・・・。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from typing import TypeVar, Generic, Iterable, Iterator

T = TypeVar(&#39;T&#39;, covariant=True)

class ImmutableList(Generic[T]):
    def __init__(self, items: Iterable[T]) -&amp;gt; None:
        ...
    def __iter__(self) -&amp;gt; Iterator[T]:
        ...
    ...

class Employee:
    ...

class Manager(Employee):
    ...

def dump_employees(emps: ImmutableList[Employee]) -&amp;gt; None:
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;dump_employees&lt;/code&gt;関数の引数は&lt;code&gt;Employee&lt;/code&gt;という型のリストとして指定されていますが、共変なので&lt;code&gt;Employee&lt;/code&gt;のサブクラスである&lt;code&gt;Manager&lt;/code&gt;をリストの中に含めることが可能です。&lt;/p&gt;

&lt;h2 id=&#34;前方参照&#34;&gt;前方参照&lt;/h2&gt;

&lt;p&gt;型ヒントが定義されていない名前を含むときは文字列リテラルとして表すことができます。&lt;/p&gt;

&lt;p&gt;木構造実装するときに自分自身を指定しますよね？あれです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;class Tree:
    def __init__(self, left: Tree, right: Tree):
        self.left = left
        self.right = right
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだとTreeがまだ定義されていないためエラーになります。これを回避するため文字列リテラルで指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;class Tree:
    def __init__(self, left: &#39;Tree&#39;, right: &#39;Tree&#39;):
        self.left = left
        self.right = right
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;直和型&#34;&gt;直和型&lt;/h2&gt;

&lt;p&gt;1つの引数に複数の型を受け取る可能性がある場合ですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from typing import Union

class Employee:
    pass

def handle_employees(e: Union[Employee, Sequence[Employee]]) -&amp;gt; None:
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでEmployee型かEmployee型のオブジェクトを含むシーケンス型を取ることが出来ます。&lt;/p&gt;

&lt;h1 id=&#34;型コメント&#34;&gt;型コメント&lt;/h1&gt;

&lt;p&gt;変数の型を明示的に指定する場合に使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;x = [] # type: List[Employee]
x, y, z = (1, &#39;a&#39;, 0.1) # type: (int, str, float)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;with&lt;/code&gt;文と&lt;code&gt;for&lt;/code&gt;文にも使用することが出来ます。&lt;/p&gt;

&lt;h1 id=&#34;終わりに&#34;&gt;終わりに&lt;/h1&gt;

&lt;p&gt;なんか時間を取らなかったおかげでPEPに書いてあることマンマになっちゃいましたね(´・ω・｀)&lt;/p&gt;

&lt;p&gt;思ったこととしては、静的な型付けをする言語とくらべてしまうとやはり面倒ですね。当たり前ですけど。
関数定義の部分がやったら長くなりそうですし。&lt;/p&gt;

&lt;p&gt;ただ、その恩恵は大きそうで静的型チェックや補完などで上手く使えればとても効果的だとは思います。&lt;/p&gt;

&lt;p&gt;それと、型について勉強不足ですね。読むのに少し苦労しましたし、ここから先の話を追っかけたり、上手く活用するためには勉強が必要そうです。。&lt;/p&gt;

&lt;p&gt;これは日を改めてもう一度まとめてみたいな〜とか考えています。&lt;/p&gt;

&lt;p&gt;　&lt;br /&gt;
びみょ〜な感じですが終わりです！&lt;br /&gt;
それでは、良いPythonライフを！！&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
